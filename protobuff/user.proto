syntax="proto3";

package user;

service UserService {
    rpc CreateUser(CreateUserRequest) returns (TotalResponse);
    rpc OrdinaryUpdateUser(OrdinaryUpdateUserRequest) returns (TotalResponse);
    rpc ChangePhoneNumber(ChangePhoneNumberRequest) returns (TotalResponse);
    rpc DeleteUser(DeleteUserRequest) returns (TotalResponse);
    rpc VerifyUserWithDocs(stream VerifyUserWithDocsRequest) returns (TotalResponse);
    rpc LightVerifyUser(LightVerifyUserRequest) returns (TotalResponse);
    rpc ChangeUserRole(ChangeUserRoleRequest) returns (TotalResponse);
    rpc UserDataValidationByAdmin(UserDataValidationByAdminRequest) returns (TotalResponse);
}

enum ADMIN_CONCLUSION {
    UNRELIABLE_DATA = 0;
    VERIFY = 1;
    POOR_QUALITY_PHOTO = 2;
    reserved 7 to 15;
}

enum ROLES {
    ROLE_PORTAL_USER = 0;
    ROLE_PORTAL_ADMIN = 1;
    ROLE_PORTAL_SUPERADMIN = 2;
}

message UserPrivateMeta {
    optional string document_id = 1;
    optional string document_photo_links = 2;
    optional string nationality = 3;
    optional string mac_ids = 4;
    optional string verify_date = 5;
    optional string br_date = 6;
    reserved 10 to 15;
}

message User {
    string fname = 1;
    string lname = 2;
    repeated ROLES roles = 3;
    optional string email = 4;
    optional string phone = 5;
    optional string phone_token = 6;
    oneof password_variant {
        string password = 7;
        string hashed_password = 8;
    }
    optional bytes avatar = 9;
    optional UserPrivateMeta privateMeta = 10;
}

message AvailableFieldsToUpdate {
    optional string fname = 1;
    optional string lname = 2;
    optional bytes avatar = 3;
    optional string br_date = 4;
}

message TotalResponse {
    string details = 1;
    int32 status = 2;
    oneof response_data {
        User user = 3;
        bool condition = 4;
    }
}

message CreateUserRequest {
    User user = 1;
}

message OrdinaryUpdateUserRequest {
    AvailableFieldsToUpdate user = 1;
}

message ChangePhoneNumberRequest {
    string phone_number = 1;
    int32 verify_code = 2;
    bool verify_with_email = 3;
}

message DeleteUserRequest {
    int32 user_id = 3;
}

message VerifyUserWithDocsRequest {
    repeated bytes documents = 1;
    reserved 5 to 10;
}

message ChangeUserRoleRequest {
    ROLES role = 1;
}

message UserDataValidationByAdminRequest {
    optional User user = 1;
    ADMIN_CONCLUSION conclusion = 3;
}

message LightVerifyUserRequest {
    int32 verify_key = 1;
}




